# -*- coding: utf-8 -*-
"""CS 6301 Team 7 Final Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7mHxcQ1xDo9Z5XxC7g44ckDZOgQZsoR
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression
import numpy as np
import itertools
from sklearn.metrics import confusion_matrix

import matplotlib.pyplot as plt

# Example function to load data
def load_data(file_path):
    return pd.read_csv(file_path)

# Example function to train a RandomForestClassifier model
def train_model_RandomForestClassifier(X_train, y_train):
    # Initialize a TF-IDF Vectorizer
    vectorizer = TfidfVectorizer()
    X_train_tfidf = vectorizer.fit_transform(X_train)  # Transform text data into TF-IDF features

    # Initialize a RandomForestClassifier and fit the model
    model = RandomForestClassifier()
    model.fit(X_train_tfidf, y_train)

    return model, vectorizer  # Return trained model and vectorizer

# Example function to train a LogisticRegression model
def train_model_LogisticRegression(X_train, y_train):
    # Initialize a TF-IDF Vectorizer
    vectorizer = TfidfVectorizer()
    X_train_tfidf = vectorizer.fit_transform(X_train)  # Transform text data into TF-IDF features

    # Initialize a LogisticRegression model and fit the data
    model = LogisticRegression()
    model.fit(X_train_tfidf, y_train)

    return model, vectorizer  # Return trained model and vectorizer

# Example function to evaluate the RandomForestClassifier model
def evaluate_model_RandomForestClassifier(model, vectorizer, X_test, y_test):
    X_test_tfidf = vectorizer.transform(X_test)  # Transform test data using the same vectorizer
    predictions = model.predict(X_test_tfidf)  # Make predictions
    print(classification_report(y_test, predictions))  # Display classification report

    cm =  confusion_matrix(y_test, predictions)
    print(cm)

    plt.figure()
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title("Confusion matrix RandomForestClassifier")
    plt.colorbar()
    tick_marks = np.arange(len(set(y_test)))
    plt.xticks(tick_marks, tick_marks, rotation=45)
    plt.yticks(tick_marks, tick_marks)

    thresh = cm.max() / 2.

    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
      plt.text(j, i, format(cm[i, j]),
             horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

# Example function to evaluate the LogisticRegression model
def evaluate_model_LogisticRegression(model, vectorizer, X_test, y_test):
    X_test_tfidf = vectorizer.transform(X_test)  # Transform test data using the same vectorizer
    predictions = model.predict(X_test_tfidf)  # Make predictions
    print(classification_report(y_test, predictions))  # Display classification report

    cm =  confusion_matrix(y_test, predictions)
    print(cm)

    plt.figure()
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title("Confusion matrix LogisticRegression")
    plt.colorbar()
    tick_marks = np.arange(len(set(y_test)))
    plt.xticks(tick_marks, tick_marks, rotation=45)
    plt.yticks(tick_marks, tick_marks)

    thresh = cm.max() / 2.

    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
      plt.text(j, i, format(cm[i, j]),
             horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

def main():
    # Load and preprocess the data
    df = load_data('finalDataset.csv')

    # Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(df['text'], df['sensitive'], test_size=0.2)

    # Train the RandomForestClassifier model
    modelRandom_ForestClassifier, vectorizer_RandomForestClassifier = train_model_RandomForestClassifier(X_train, y_train)

    # Train the LogisticRegression model
    modelRandom_LogisticRegression, vectorizer_LogisticRegression = train_model_LogisticRegression(X_train, y_train)

    # Evaluate the RandomForestClassifier model
    evaluate_model_RandomForestClassifier(modelRandom_ForestClassifier, vectorizer_RandomForestClassifier, X_test, y_test)


    # Evaluate the LogisticRegression model
    evaluate_model_LogisticRegression(modelRandom_LogisticRegression, vectorizer_LogisticRegression, X_test, y_test)

if __name__ == "__main__":
    main()